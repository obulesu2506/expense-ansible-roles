- name: Disable current nodejs version
  ansible.builtin.command: dnf module disable nodejs -y

- name: Enable nodejs 20 version
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: Install nodejs:20 version
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
  - nodejs
  - mysql

- name: create Expense User
  ansible.builtin.user:
    name: expense

- name: include from common role
  # tags:
  #   - deployment
  include_role:
    name: common
    tasks_from: main

# - name: Create App directory for downloading the backend code
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: Downloading the backend code
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: unzip backend code
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes

- name: install dependencies
  tags:
  - deployment
  community.general.npm:
    path: /app

- name: copy backend service
  ansible.builtin.template: # it will search in templates folder, it will search in files folder if we mention .file
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: install Python Libraries
  ansible.builtin.pip:
    name: "{{ item }}"
    executable: pip3.9
  loop:
  - cryptography
  - PyMySQL

- name: import MYSQL data
  community.mysql.mysql_db:
    login_user: "{{ MYSQL_USER}}"
    login_password: "{{ MYSQL_PASSWORD }}"
    login_host: "{{ MYSQL_HOST }}"
    target: /app/schema/backend.sql
    name: all
    state: import

- name: daemon reload and restart the service
  tags:
  - deployment
  ansible.builtin.systemd_service:
    name: backend
    state: restarted
    daemon_reload: true
    enabled: true

